generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id               String     @id @default(auto()) @map("_id") @db.ObjectId
    name             String?
    email            String     @unique
    passwordHash     String
    profilePicUrl    String     @default("https://static.vecteezy.com/system/resources/previews/020/765/399/non_2x/default-profile-account-unknown-icon-black-silhouette-free-vector.jpg")
    bookedVisits     Json[]
    favResidenciesID String[]   @db.ObjectId
    bidsMade         Bid[]
    landlord         Boolean
    ownedResidencies Property[] @relation("Owner")
    groupId          String?    @map("groupId") @db.ObjectId
    group            Group?     @relation(fields: [groupId], references: [id])
}

model Property {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    title          String
    description    String
    price          Int
    address        String
    city           String
    country        String
    images         Image[] // Relation to Image Model
    facilities     Json
    userId         String   @db.ObjectId // Link to the User model by ID
    owner          User     @relation("Owner", fields: [userId], references: [id])
    bids           Bid[] // Relation to Bid Model
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    deadline       DateTime
    live           Boolean  @default(true) // If Property is on the market or not.
    availableRooms Int // Number of available rooms

    @@unique(fields: [address, userId])
}

model Image {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    url         String
    description String
    propertyId  String   @db.ObjectId
    property    Property @relation(fields: [propertyId], references: [id])

    @@index([propertyId], name: "idx_image_propertyId")
}

enum BidStatus {
    PENDING
    ACCEPTED
    REJECTED
}

model Bid {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    amount     Int
    property   Property  @relation(fields: [propertyId], references: [id])
    propertyId String    @db.ObjectId
    user       User      @relation(fields: [userId], references: [id])
    userId     String    @db.ObjectId
    status     BidStatus @default(PENDING)
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    // New fields for capturing group details indirectly through the User
    groupId    String?   @db.ObjectId
    group      Group?    @relation(fields: [groupId], references: [id])
}

model Group {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    joinCode       String @unique
    numberOfPeople Int
    users          User[]
    bids           Bid[]
}
